{
	"$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"IotHubLocation": {
			"defaultValue": "Central US",
			"allowedValues": [
				"Central US",
				"Japan East",
				"North Europe"
			],
			"type": "String",
			"metadata": {
				"description": "Region"
			}
		},
		"PortalRepoURL": {
			"defaultValue": "https://github.com/daisukeiot/Solution-Template-WebApp.git",
			"type": "String",
			"metadata": {
				"description": "The URL for the GitHub repository that contains the project to deploy."
			}
		},
		"PortalRepoBranch": {
			"defaultValue": "v0.4",
			"type": "String",
			"metadata": {
				"description": "The branch of the GitHub repository to use."
			}
		},
		"FunctionRepoURL": {
			"defaultValue": "https://github.com/daisukeiot/Solution-Template-Functions.git",
			"type": "String",
			"metadata": {
				"description": "The URL for the GitHub repository that contains the project to deploy."
			}
		},
		"FunctionRepoBranch": {
			"defaultValue": "v0.4",
			"type": "String",
			"metadata": {
				"description": "The branch of the GitHub repository to use."
			}
		}
	},
	"variables": {
		"iotHubLocation": "[parameters('IotHubLocation')]",
		"iotHubName": "[concat('Hub-', take(uniqueString(resourceGroup().id),5))]",
		"iotHubConsumerGroupName": "[concat('Hub-', take(uniqueString(resourceGroup().id),5), '/events/eventhubs-cg')]",
		"iotHubPolicyName": "iothubowner",
		"iotHubEventGridTopic": "EventGridIoTHubTopic",
		"eventHubsNameSpace": "[concat('EventHubs-', take(uniqueString(resourceGroup().id),5))]",
		"eventHubName": "devicetelemetryhub",
		"eventHubFunctionConsumerGroupName": "telemetry-functions-cg",
		"eventHubTsiConsumerGroupName": "telemetry-tsi-cg",
		"functionAppName": "[concat('Functions-', take(uniqueString(resourceGroup().id),5))]",
		"hostingPlanName": "[concat('HostingPlan-', take(uniqueString(resourceGroup().id),5))]",
		"storageAccountName": "[toLower(concat('stor', take(uniqueString(resourceGroup().id),5)))]",
		"signalrName": "[concat('SignalR-', take(uniqueString(resourceGroup().id),5))]",
		"portalSiteName": "[concat('Portal-', take(uniqueString(resourceGroup().id),5))]",
		"PortalRepoURL": "[parameters('PortalRepoURL')]",
		"PortalRepoBranch": "[parameters('PortalRepoBranch')]",
		"FunctionRepoURL": "[parameters('FunctionRepoURL')]",
		"FunctionRepoBranch": "[parameters('FunctionRepoBranch')]",
		"DPSName": "[concat('DPS-', take(uniqueString(resourceGroup().id),5))]"
	},
	"resources": [
		{
			"type": "Microsoft.EventHub/namespaces",
			"apiVersion": "2018-01-01-preview",
			"name": "[variables('eventHubsNameSpace')]",
			"location": "[variables('iotHubLocation')]",
			"tags": {
				"ENV": "v0.4"
			},
			"sku": {
				"name": "Standard",
				"tier": "Standard",
				"capacity": 1
			},
			"properties": {},
			"resources": [
				{
					"type": "Microsoft.EventHub/namespaces/AuthorizationRules",
					"apiVersion": "2017-04-01",
					"name": "[concat(variables('eventHubsNameSpace'), '/RootManageSharedAccessKey')]",
					"dependsOn": [
						"[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNameSpace'))]"
					],
					"properties": {
						"rights": [
							"Send",
							"Listen",
							"Manage"
						]
					}
				},
				{
					"type": "Microsoft.EventHub/namespaces/AuthorizationRules",
					"apiVersion": "2017-04-01",
					"name": "[concat(variables('eventHubsNameSpace'), '/GlobalSendOnlyRule')]",
					"dependsOn": [
						"[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNameSpace'))]"
					],
					"properties": {
						"rights": [
							"Send"
						]
					}
				},
				{
					"type": "eventhubs",
					"apiVersion": "2017-04-01",
					"name": "[variables('eventHubName')]",
					"location": "[variables('iotHubLocation')]",
					"dependsOn": [
						"[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNameSpace'))]"
					],
					"properties": {
						"messageRetentionInDays": 1,
						"partitionCount": 1
					},
					"resources": [
						{
							"type": "authorizationRules",
							"apiVersion": "2017-04-01",
							"name": "TelemetryListenRule",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubsNameSpace'),'/eventhubs/',variables('eventHubName'))]"
							],
							"properties": {
								"rights": [
									"Listen"
								]
							}
						},
						{
							"type": "authorizationRules",
							"apiVersion": "2017-04-01",
							"name": "TelemetrySendRule",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubsNameSpace'),'/eventhubs/',variables('eventHubName'))]"
							],
							"properties": {
								"rights": [
									"Send"
								]
							}
						},
						{
							"type": "consumergroups",
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubFunctionConsumerGroupName')]",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubsNameSpace'), '/eventhubs/', variables('eventHubName'))]",
								"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubsNameSpace'), variables('eventHubName'), 'TelemetrySendRule')]"
							],
							"properties": {}
						},
						{
							"type": "consumergroups",
							"apiVersion": "2017-04-01",
							"name": "[variables('eventHubTsiConsumerGroupName')]",
							"dependsOn": [
								"[concat('Microsoft.EventHub/namespaces/', variables('eventHubsNameSpace'), '/eventhubs/', variables('eventHubName'))]",
								"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubsNameSpace'), variables('eventHubName'), 'TelemetrySendRule')]"
							],
							"properties": {}
						}
					]
				}
			]
		},
		{
			"type": "Microsoft.Devices/IotHubs",
			"apiVersion": "2020-03-01",
			"name": "[variables('iotHubName')]",
			"location": "[variables('iotHubLocation')]",
			"tags": {
				"ENV": "v0.4"
			},
			"sku": {
				"name": "S1",
				"tier": "Standard",
				"capacity": 1
			},
			"identity": {
				"type": "None"
			},
			"dependsOn": [
				"[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('eventHubsNameSpace'), 'GlobalSendOnlyRule')]",
				"[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubsNameSpace'), variables('eventHubName'), 'TelemetrySendRule')]"
			],
			"properties": {
				"ipFilterRules": [],
				"eventHubEndpoints": {
					"events": {
						"retentionTimeInDays": 1,
						"partitionCount": 4
					}
				},
				"routing": {
					"endpoints": {
						"serviceBusQueues": [],
						"serviceBusTopics": [],
						"eventHubs": [
							{
								"connectionString": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubsNameSpace'),variables('eventHubName'),'TelemetrySendRule'),'2017-04-01').primaryConnectionString]",
								"name": "DeviceTelemetryToEventHub-EP"
							}
						],
						"storageContainers": []
					},
					"routes": [
						{
							"name": "DeviceLifecycleRoute",
							"source": "DeviceLifecycleEvents",
							"condition": "true",
							"endpointNames": [
								"events"
							],
							"isEnabled": true
						},
						{
							"name": "DeviceTwinChangeRoute",
							"source": "TwinChangeEvents",
							"condition": "true",
							"endpointNames": [
								"events"
							],
							"isEnabled": true
						},
						{
							"name": "DigitalTwinChangeRoute",
							"source": "DigitalTwinChangeEvents",
							"condition": "true",
							"endpointNames": [
								"events"
							],
							"isEnabled": true
						},
						{
							"name": "DeviceTelemetryRoute",
							"source": "DeviceMessages",
							"condition": "true",
							"endpointNames": [
								"DeviceTelemetryToEventHub-EP"
							],
							"isEnabled": true
						}
					],
					"fallbackRoute": {
						"name": "$fallback",
						"source": "DeviceMessages",
						"condition": "true",
						"endpointNames": [
							"events"
						],
						"isEnabled": true
					}
				},
				"messagingEndpoints": {
					"fileNotifications": {
						"lockDurationAsIso8601": "PT1M",
						"ttlAsIso8601": "PT1H",
						"maxDeliveryCount": 10
					}
				},
				"enableFileUploadNotifications": false,
				"cloudToDevice": {
					"maxDeliveryCount": 10,
					"defaultTtlAsIso8601": "PT1H",
					"feedback": {
						"lockDurationAsIso8601": "PT1M",
						"ttlAsIso8601": "PT1H",
						"maxDeliveryCount": 10
					}
				},
				"features": "None"
			}
		},
		{
			"type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
			"apiVersion": "2018-04-01",
			"name": "[variables('iotHubConsumerGroupName')]",
			"dependsOn": [
				"[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]"
			]
		},
		{
			"type": "Microsoft.Devices/provisioningServices",
			"apiVersion": "2020-01-01",
			"name": "[variables('DPSName')]",
			"location": "[variables('iotHubLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]"
			],
			"tags": {
				"ENV": "v0.4"
			},
			"sku": {
				"name": "S1",
				"tier": "Standard",
				"capacity": 1
			},
			"properties": {
				"iotHubs": [
					{
						"applyAllocationPolicy": true,
						"connectionString": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]",
						"location": "[variables('iotHubLocation')]"
					}
				],
				"allocationPolicy": "Hashed"
			}
		},
		{
			"type": "Microsoft.EventGrid/systemTopics",
			"apiVersion": "2020-04-01-preview",
			"name": "[variables('iotHubEventGridTopic')]",
			"location": "[variables('iotHubLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]"
			],
			"tags": {
				"ENV": "v0.4"
			},
			"properties": {
				"source": "[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]",
				"topicType": "Microsoft.Devices.IoTHubs"
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2018-11-01",
			"name": "[variables('storageAccountName')]",
			"location": "[variables('iotHubLocation')]",
			"tags": {
				"ENV": "v0.4"
			},
			"sku": {
				"name": "Standard_LRS"
			},
			"kind": "Storage"
		},
		{
			"type": "Microsoft.Web/serverfarms",
			"apiVersion": "2018-11-01",
			"name": "[variables('hostingPlanName')]",
			"location": "[variables('iotHubLocation')]",
			"tags": {
				"ENV": "v0.4"
			},
			"sku": {
				"name": "S1"
			},
			"kind": "app",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
			],
			"properties": {
				"workerSize": 0,
				"numberOfWorkers": 1
			}
		},
		{
			"type": "Microsoft.Web/sites",
			"apiVersion": "2020-06-01",
			"name": "[variables('functionAppName')]",
			"location": "[variables('iotHubLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]",
				"[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
				"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
				"[resourceId('Microsoft.SignalRService/SignalR', variables('signalrName'))]"
			],
			"tags": {
				"ENV": "v0.4"
			},
			"kind": "functionapp",
			"properties": {
				"name": "[variables('functionAppName')]",
				"serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
				"clientAffinityEnabled": false,
				"enabled": true,
				"siteConfig": {
					"alwaysOn": true,
					"cors": {
						"allowedOrigins": [
							"*"
						]
					},
					"appSettings": [
						{
							"name": "FUNCTIONS_EXTENSION_VERSION",
							"value": "~3"
						},
						{
							"name": "AzureWebJobsStorage",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value,';')]"
						},
						{
							"name": "AzureWebJobsDashboard",
							"value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value,';')]"
						},
						{
							"name": "EVENTHUB_CS",
							"value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubsNameSpace'),variables('eventHubName'),'TelemetryListenRule'),'2017-04-01').primaryConnectionString]"
						},
						{
							"name": "AzureSignalRConnectionString",
							"value": "[concat('Endpoint=https://', toLower(variables('signalrName')), '.service.signalr.net;AccessKey=', listKeys(variables('signalrName'), providers('Microsoft.SignalRService', 'SignalR').apiVersions[0]).primaryKey)]"
						}
					]
				}
			},
			"resources": [
				{
					"type": "sourcecontrols",
					"apiVersion": "2020-06-01",
					"name": "web",
					"dependsOn": [
						"[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]"
					],
					"properties": {
						"RepoUrl": "[variables('FunctionRepoURL')]",
						"branch": "[variables('FunctionRepoBranch')]",
						"IsManualIntegration": true
					}
				}
			]
		},
		{
			"type": "Microsoft.SignalRService/SignalR",
			"apiVersion": "2020-05-01",
			"name": "[variables('signalrName')]",
			"location": "[variables('iotHubLocation')]",
			"tags": {
				"ENV": "v0.4"
			},
			"sku": {
				"name": "Standard_S1",
				"tier": "Standard",
				"size": "S1",
				"capacity": 1
			},
			"kind": "SignalR",
			"properties": {
				"features": [
					{
						"flag": "ServiceMode",
						"value": "Classic",
						"properties": {}
					}
				],
				"cors": {
					"allowedOrigins": [
						"[concat('https://', toLower(variables('portalSiteName')), '.azurewebsites.net')]"
					]
				}
			}
		},
		{
			"type": "Microsoft.Web/sites",
			"apiVersion": "2020-06-01",
			"name": "[variables('portalSiteName')]",
			"location": "[variables('iotHubLocation')]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
			],
			"tags": {
				"ENV": "v0.4"
			},
			"properties": {
				"serverFarmId": "[variables('hostingPlanName')]",
				"siteConfig": {
					"webSocketsEnabled": true,
					"appSettings": [
						{
							"name": "Azure__SignalR__ConnectionString",
							"value": "[concat('Endpoint=https://', toLower(variables('signalrName')), '.service.signalr.net;AccessKey=', listKeys(variables('signalrName'), providers('Microsoft.SignalRService', 'SignalR').apiVersions[0]).primaryKey)]"
						},
						{
							"name": "Azure__IoTHub__ConnectionString",
							"value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
						}
					]
				}
			},
			"resources": [
				{
					"type": "sourcecontrols",
					"apiVersion": "2020-06-01",
					"name": "web",
					"dependsOn": [
						"[resourceId('Microsoft.Web/Sites', variables('portalSiteName'))]"
					],
					"properties": {
						"repoUrl": "[variables('PortalRepoURL')]",
						"branch": "[variables('PortalRepoBranch')]",
						"IsManualIntegration": true
					}
				}
			]
		},
		{
			"type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
			"apiVersion": "2020-04-01-preview",
			"name": "[concat(variables('iotHubEventGridTopic'), '/PortalIoTHubEventSubscription')]",
			"dependsOn": [
				"[resourceId('Microsoft.EventGrid/systemTopics', variables('iotHubEventGridTopic'))]",
				"[resourceId('Microsoft.Web/Sites/sourcecontrols/', variables('portalSiteName'),'web')]"
			],
			"properties": {
				"destination": {
					"properties": {
						"maxEventsPerBatch": 1,
						"preferredBatchSizeInKilobytes": 64,
						"endpointUrl": "[concat('https://',  variables('portalSiteName'),'.azurewebsites.net/api/eventgrid')]"
					},
					"endpointType": "WebHook"
				},
				"filter": {
					"includedEventTypes": [
						"Microsoft.Devices.DeviceCreated",
						"Microsoft.Devices.DeviceDeleted",
						"Microsoft.Devices.DeviceConnected",
						"Microsoft.Devices.DeviceDisconnected"
					]
				},
				"labels": [],
				"eventDeliverySchema": "EventGridSchema",
				"retryPolicy": {
					"maxDeliveryAttempts": 30,
					"eventTimeToLiveInMinutes": 1440
				}
			}
		}
	],
	"outputs": {
		"_Web_Site_Address": {
			"type": "String",
			"value": "[concat('https://',  variables('portalSiteName'),'.azurewebsites.net/')]"
		},
		"_IoT_Hub_Name": {
			"type": "String",
			"value": "[variables('iotHubName')]"
		},
		"_IoT_Hub_Connection_String": {
			"type": "String",
			"value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
		},
		"_Function_App_Name": {
			"type": "String",
			"value": "[variables('functionAppName')]"
		},
		"_Storage_Account_Name": {
			"type": "String",
			"value": "[variables('storageAccountName')]"
		},
		"_SignalR_Name": {
			"type": "String",
			"value": "[variables('signalrName')]"
		}
	}
}